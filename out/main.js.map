{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from \"vscode\";\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\tconsole.log('activated');\r\n\t\r\n\tcontext.subscriptions.push(HOVER_DEFN);\r\n}\r\n\r\nconst HOVER_DEFN = vscode.languages.registerHoverProvider(\r\n\t{ scheme: \"file\", language: \"asm\" },\r\n\t{\r\n\t\tprovideHover(document, position, token) {\r\n\t\t\tconst range = document.getWordRangeAtPosition(position);\r\n\t\t\tconst word = document.getText(range).toLowerCase();\r\n\t\t\tif(isOpcodeName(word) && OPCODES.has(word)) {\r\n\t\t\t\treturn new vscode.Hover(OPCODES.get(word)!.markdownDesc);\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n);\r\n\r\n// address - m[x]\r\n// location - pc := x\r\n// constant - ac := x\r\n// offset - m[sp + x]\r\ntype XMode = \"address\" | \"location\" | \"constant\" | \"offset\"\r\n\r\nconst opcodeNames = [\r\n\t\"lodd\",\r\n\t\"stod\",\r\n\t\"addd\",\r\n\t\"subd\",\r\n\t\"jpos\",\r\n\t\"jzer\",\r\n\t\"jump\",\r\n\t\"loco\",\r\n\t\"lodl\",\r\n\t\"stol\",\r\n\t\"addl\",\r\n\t\"subl\",\r\n\t\"jneg\",\r\n\t\"jnze\",\r\n\t\"call\",\r\n\t\"pshi\",\r\n\t\"popi\",\r\n\t\"push\",\r\n\t\"pop\",\r\n\t\"retn\",\r\n\t\"swap\",\r\n\t\"insp\",\r\n\t\"desp\",\r\n\t\"halt\",\r\n] as const;\r\n\r\ntype OpcodeName = typeof opcodeNames[number];\r\nfunction isOpcodeName(x: string): x is OpcodeName {\r\n\treturn (opcodeNames as readonly string[]).indexOf(x) >= 0;\r\n}\r\n\r\ntype Signature = {\r\n\targ1?: Argument;\r\n\targ2?: Argument;\r\n};\r\n\r\nclass Argument {\r\n\targName: string;\r\n\txMode: XMode;\r\n\tdesc: string;\r\n\tconstructor(argName: string, mode: XMode) {\r\n\t\tthis.argName = argName;\r\n\t\tthis.xMode = mode;\r\n\t\tthis.desc = `<${this.argName}: ${this.xMode}>`;\r\n\t}\r\n};\r\n\r\nclass Opcode {\r\n\tname: OpcodeName;\r\n\tsignature?: Signature;\r\n\tdescription: string;\r\n\tmarkdownDesc: vscode.MarkdownString;\r\n\t\r\n\tconstructor(name: OpcodeName, description: string, signature?: Signature) {\r\n\t\tthis.name = name;\r\n\t\tthis.signature = signature;\r\n\t\tthis.description = description;\r\n\t\t// Format description from signature\r\n\t\tif (this.signature?.arg1) {\r\n\t\t\tthis.description = this.description.replace(\"$1\", String.raw`\\<${this.signature.arg1.argName}\\>`);\r\n\t\t}\r\n\t\tif (this.signature?.arg2) {\r\n\t\t\tthis.description = this.description.replace(\"$2\", String.raw`\\<${this.signature.arg2.argName}\\>`);\r\n\t\t}\r\n\t\t\r\n\t\t// Generate markdownDesc\r\n\t\tlet heading = this.name;\r\n\t\tif (this.signature?.arg1) {\r\n\t\t\theading += ` ${this.signature?.arg1.desc}`;\r\n\t\t}\r\n\t\tif (this.signature?.arg2) {\r\n\t\t\theading += ` ${this.signature?.arg2.desc}`;\r\n\t\t}\r\n\t\tthis.markdownDesc = new vscode.MarkdownString()\r\n\t\t\t.appendCodeblock(heading, \"asm\")\r\n\t\t\t.appendMarkdown(\"\\n --- \\n\") // insert horizontal rule\r\n\t\t\t.appendMarkdown(this.description);\r\n\t}\r\n}\r\n\r\nconst OPCODES = new Map<OpcodeName, Opcode>([\r\n\t[\r\n\t\t\"lodd\",\r\n\t\tnew Opcode(\"lodd\", \"Load direct\\n\\n`ac := m[x]`\\n\\n`0000xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"address\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"stod\",\r\n\t\tnew Opcode(\"stod\", \"Store direct\\n\\n`m[x] := ac`\\n\\n`0001xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"address\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"addd\",\r\n\t\tnew Opcode(\"addd\", \"Add direct\\n\\n`ac := ac + m[x]`\\n\\n`0010xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"address\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"subd\",\r\n\t\tnew Opcode(\"subd\", \"Subtract direct\\n\\n`ac := ac - m[x]`\\n\\n`0011xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"address\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"jpos\",\r\n\t\tnew Opcode(\"jpos\", \"Jump positive\\n\\n`if ac >= 0 then pc := x`\\n\\n`0100xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"location\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"jzer\",\r\n\t\tnew Opcode(\"jzer\", \"Jump zero\\n\\n`if ac = 0 then pc := x`\\n\\n`0101xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"location\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"jump\",\r\n\t\tnew Opcode(\"jump\", \"Jump\\n\\n`pc := x`\\n\\n`0110xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"location\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"loco\",\r\n\t\tnew Opcode(\"loco\", \"Load constant\\n\\n`ac := x (0 <= x <= 4095)`\\n\\n`0111xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"constant\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"lodl\",\r\n\t\tnew Opcode(\"lodl\", \"Load local\\n\\n`ac := m[sp + x]`\\n\\n`1000xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"offset\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"stol\",\r\n\t\tnew Opcode(\"stol\", \"Store local\\n\\n`m[x + sp] := ac`\\n\\n`1001xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"offset\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"addl\",\r\n\t\tnew Opcode(\"addl\", \"Add local\\n\\n`ac := ac + m[sp + x]`\\n\\n`1010xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"offset\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"subl\",\r\n\t\tnew Opcode(\"subl\", \"Subtract local\\n\\n`ac := ac - m[sp + x]`\\n\\n`1011xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"offset\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"jneg\",\r\n\t\tnew Opcode(\"jneg\", \"Jump negative\\n\\n`if ac < 0 then pc := x`\\n\\n`1100xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"location\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"jnze\",\r\n\t\tnew Opcode(\"jnze\", \"Jump nonzero\\n\\n`if ac != 0 then pc := x`\\n\\n`1101xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"location\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"call\",\r\n\t\tnew Opcode(\"call\", \"Call procedure\\n\\n`sp := sp - 1;`\\n\\n`m[sp] := pc;`\\n\\n`pc := x`\\n\\n`1110xxxxxxxxxxxx`\", {\r\n\t\t\targ1: new Argument(\"x\", \"location\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"pshi\",\r\n\t\tnew Opcode(\"pshi\", \"Push indirect\\n\\n`sp := sp - 1;`\\n\\n`m[sp] := m[ac]`\\n\\n`1111000000000000`\")\r\n\t],\r\n\t[\r\n\t\t\"popi\",\r\n\t\tnew Opcode(\"popi\", \"Pop indirect\\n\\n`m[ac] := m[sp];`\\n\\n`sp := sp + 1`\\n\\n`1111001000000000`\")\r\n\t],\r\n\t[\r\n\t\t\"push\",\r\n\t\tnew Opcode(\"push\", \"Push onto stack\\n\\n`sp := sp - 1;`\\n\\n`m[sp] := ac`\\n\\n`1111010000000000`\")\r\n\t],\r\n\t[\r\n\t\t\"pop\",\r\n\t\tnew Opcode(\"pop\", \"Pop from stack\\n\\n`ac := m[sp];`\\n\\n`sp := sp + 1`\\n\\n`1111011000000000`\")\r\n\t],\r\n\t[\r\n\t\t\"retn\",\r\n\t\tnew Opcode(\"retn\", \"Return\\n\\n`pc := m[sp];`\\n\\n`sp := sp + 1`\\n\\n`1111100000000000`\")\r\n\t],\r\n\t[\r\n\t\t\"swap\",\r\n\t\tnew Opcode(\"swap\", \"Swap ac, sp\\n\\n`tmp := ac;`\\n\\n`ac := sp;`\\n\\n`sp := tmp`\\n\\n`1111101000000000`\")\r\n\t],\r\n\t[\r\n\t\t\"insp\",\r\n\t\tnew Opcode(\"insp\", \"Increment sp\\n\\n`sp := sp + y (0 <= y <= 255)`\\n\\n`11111100yyyyyyyy`\", {\r\n\t\t\targ1: new Argument(\"y\", \"constant\")\r\n\t\t})\r\n\t],\r\n\t[\r\n\t\t\"desp\",\r\n\t\tnew Opcode(\"desp\", \"Decrement sp\\n\\n`sp := sp - y (0 <= y <= 255)`\\n\\n`11111110yyyyyyyy`\")\r\n\t],\r\n\t[\r\n\t\t\"halt\",\r\n\t\tnew Opcode(\"halt\", \"Go to debugger interface\\n\\n`1111111100000000`\")\r\n\t],\r\n]);\r\n\r\nexport function deactivate() {}\r\n"],
  "mappings": "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",
  "names": []
}
